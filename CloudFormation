{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormer Beta - template creation prototype application. This tool allows you to create an AWS CloudFormation template from the AWS resources in your AWS account. **Warning** This template creates a single EC2 instance in your account to run the application - you will be billed for the instance at normal AWS EC2 rates.",
    "Parameters": {
        "Username": {
            "Description": "Username to log in to CloudFormer",
            "Type": "String"
        },
        "Password": {
            "Description": "Password to log in to CloudFormer",
            "Type": "String",
            "NoEcho": "true"
        },
         "IAMUser": {
            "Description": "IAM user to have only Read Only Access on S3",
            "Type": "String"
        },
        "HostedZone": {
            "Description": "HostedZone Name",
            "Type": "String"
        },
        "VPCSelection": {
            "Description": "This setting will control if the Cloudformer Web server will launch in the default VPC or if a new VPC will be created, or if you wish to launch into an existing non-default VPC.",
            "Type": "String",
            "Default": "CreateNewVPC",
            "AllowedValues": [
                "Default",
                "CreateNewVPC"
            ],
            "ConstraintDescription": "must be either Default or CreateNewVPC"
        }
    },
    "Conditions": {
        "DefaultVPC": {
            "Fn::Equals": [
                {
                    "Ref": "VPCSelection"
                },
                "Default"
            ]
        },
        "CreateNewVPC": {
            "Fn::Equals": [
                {
                    "Ref": "VPCSelection"
                },
                "CreateNewVPC"
            ]
        }
    },
    "Mappings": {
        "Region2Examples": {
            "us-east-1": {
                "Examples": "https://s3.amazonaws.com/cloudformation-examples-us-east-1"
            },
            "us-west-2": {
                "Examples": "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2"
            },
            "us-west-1": {
                "Examples": "https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1"
            },
            "eu-west-1": {
                "Examples": "https://s3-eu-west-1.amazonaws.com/cloudformation-examples-eu-west-1"
            },
            "eu-central-1": {
                "Examples": "https://s3-eu-central-1.amazonaws.com/cloudformation-examples-eu-central-1"
            },
            "ap-southeast-1": {
                "Examples": "https://s3-ap-southeast-1.amazonaws.com/cloudformation-examples-ap-southeast-1"
            },
            "ap-northeast-1": {
                "Examples": "https://s3-ap-northeast-1.amazonaws.com/cloudformation-examples-ap-northeast-1"
            },
            "ap-southeast-2": {
                "Examples": "https://s3-ap-southeast-2.amazonaws.com/cloudformation-examples-ap-southeast-2"
            },
            "ap-northeast-2": {
                "Examples": "https://s3-ap-northeast-2.amazonaws.com/cloudformation-examples-ap-northeast-2"
            },
            "ap-northeast-3": {
                "Examples": "https://s3-ap-northeast-3.amazonaws.com/cloudformation-examples-ap-northeast-3"
            },
            "ap-south-1": {
                "Examples": "https://s3-ap-south-1.amazonaws.com/cloudformation-examples-ap-south-1"
            },
            "us-east-2": {
                "Examples": "https://s3-us-east-2.amazonaws.com/cloudformation-examples-us-east-2"
            },
            "sa-east-1": {
                "Examples": "https://s3-sa-east-1.amazonaws.com/cloudformation-examples-sa-east-1"
            },
            "cn-north-1": {
                "Examples": "https://s3.cn-north-1.amazonaws.com.cn/cloudformation-examples-cn-north-1"
            },
            "cn-northwest-1": {
                "Examples": "https://s3.cn-northwest-1.amazonaws.com.cn/cloudformation-examples-cn-northwest-1"
            },
            "ca-central-1": {
                "Examples": "https://s3-ca-central-1.amazonaws.com/cloudformation-examples-ca-central-1"
            },
            "eu-west-2": {
                "Examples": "https://s3-eu-west-2.amazonaws.com/cloudformation-examples-eu-west-2"
            },
            "eu-west-3": {
                "Examples": "https://s3-eu-west-3.amazonaws.com/cloudformation-examples-eu-west-3"
            }
        },
        "Region2Principal": {
            "us-east-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "us-west-2": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "us-west-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "eu-west-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "ap-southeast-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "ap-northeast-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "ap-southeast-2": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "ap-northeast-2": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "ap-northeast-3": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "ap-south-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "us-east-2": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "sa-east-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "cn-north-1": {
                "EC2Principal": "ec2.amazonaws.com.cn",
                "OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
            },
            "cn-northwest-1": {
                "EC2Principal": "ec2.amazonaws.com.cn",
                "OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
            },
            "eu-central-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "eu-west-2": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "ca-central-1": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            },
            "eu-west-3": {
                "EC2Principal": "ec2.amazonaws.com",
                "OpsWorksPrincipal": "opsworks.amazonaws.com"
            }
        },
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "PV64"
            },
            "t2.nano": {
                "Arch": "HVM64"
            },
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            },
            "t2.large": {
                "Arch": "HVM64"
            },
            "m1.small": {
                "Arch": "PV64"
            },
            "m1.medium": {
                "Arch": "PV64"
            },
            "m1.large": {
                "Arch": "PV64"
            },
            "m1.xlarge": {
                "Arch": "PV64"
            },
            "m2.xlarge": {
                "Arch": "PV64"
            },
            "m2.2xlarge": {
                "Arch": "PV64"
            },
            "m2.4xlarge": {
                "Arch": "PV64"
            },
            "m3.medium": {
                "Arch": "HVM64"
            },
            "m3.large": {
                "Arch": "HVM64"
            },
            "m3.xlarge": {
                "Arch": "HVM64"
            },
            "m3.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.large": {
                "Arch": "HVM64"
            },
            "m4.xlarge": {
                "Arch": "HVM64"
            },
            "m4.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.4xlarge": {
                "Arch": "HVM64"
            },
            "m4.10xlarge": {
                "Arch": "HVM64"
            },
            "c1.medium": {
                "Arch": "PV64"
            },
            "c1.xlarge": {
                "Arch": "PV64"
            },
            "c3.large": {
                "Arch": "HVM64"
            },
            "c3.xlarge": {
                "Arch": "HVM64"
            },
            "c3.2xlarge": {
                "Arch": "HVM64"
            },
            "c3.4xlarge": {
                "Arch": "HVM64"
            },
            "c3.8xlarge": {
                "Arch": "HVM64"
            },
            "c4.large": {
                "Arch": "HVM64"
            },
            "c4.xlarge": {
                "Arch": "HVM64"
            },
            "c4.2xlarge": {
                "Arch": "HVM64"
            },
            "c4.4xlarge": {
                "Arch": "HVM64"
            },
            "c4.8xlarge": {
                "Arch": "HVM64"
            },
            "g2.2xlarge": {
                "Arch": "HVMG2"
            },
            "g2.8xlarge": {
                "Arch": "HVMG2"
            },
            "r3.large": {
                "Arch": "HVM64"
            },
            "r3.xlarge": {
                "Arch": "HVM64"
            },
            "r3.2xlarge": {
                "Arch": "HVM64"
            },
            "r3.4xlarge": {
                "Arch": "HVM64"
            },
            "r3.8xlarge": {
                "Arch": "HVM64"
            },
            "i2.xlarge": {
                "Arch": "HVM64"
            },
            "i2.2xlarge": {
                "Arch": "HVM64"
            },
            "i2.4xlarge": {
                "Arch": "HVM64"
            },
            "i2.8xlarge": {
                "Arch": "HVM64"
            },
            "d2.xlarge": {
                "Arch": "HVM64"
            },
            "d2.2xlarge": {
                "Arch": "HVM64"
            },
            "d2.4xlarge": {
                "Arch": "HVM64"
            },
            "d2.8xlarge": {
                "Arch": "HVM64"
            },
            "hi1.4xlarge": {
                "Arch": "HVM64"
            },
            "hs1.8xlarge": {
                "Arch": "HVM64"
            },
            "cr1.8xlarge": {
                "Arch": "HVM64"
            },
            "cc2.8xlarge": {
                "Arch": "HVM64"
            }
        },
        "AWSInstanceType2NATArch": {
            "t1.micro": {
                "Arch": "NATPV64"
            },
            "t2.nano": {
                "Arch": "NATHVM64"
            },
            "t2.micro": {
                "Arch": "NATHVM64"
            },
            "t2.small": {
                "Arch": "NATHVM64"
            },
            "t2.medium": {
                "Arch": "NATHVM64"
            },
            "t2.large": {
                "Arch": "NATHVM64"
            },
            "m1.small": {
                "Arch": "NATPV64"
            },
            "m1.medium": {
                "Arch": "NATPV64"
            },
            "m1.large": {
                "Arch": "NATPV64"
            },
            "m1.xlarge": {
                "Arch": "NATPV64"
            },
            "m2.xlarge": {
                "Arch": "NATPV64"
            },
            "m2.2xlarge": {
                "Arch": "NATPV64"
            },
            "m2.4xlarge": {
                "Arch": "NATPV64"
            },
            "m3.medium": {
                "Arch": "NATHVM64"
            },
            "m3.large": {
                "Arch": "NATHVM64"
            },
            "m3.xlarge": {
                "Arch": "NATHVM64"
            },
            "m3.2xlarge": {
                "Arch": "NATHVM64"
            },
            "m4.large": {
                "Arch": "NATHVM64"
            },
            "m4.xlarge": {
                "Arch": "NATHVM64"
            },
            "m4.2xlarge": {
                "Arch": "NATHVM64"
            },
            "m4.4xlarge": {
                "Arch": "NATHVM64"
            },
            "m4.10xlarge": {
                "Arch": "NATHVM64"
            },
            "c1.medium": {
                "Arch": "NATPV64"
            },
            "c1.xlarge": {
                "Arch": "NATPV64"
            },
            "c3.large": {
                "Arch": "NATHVM64"
            },
            "c3.xlarge": {
                "Arch": "NATHVM64"
            },
            "c3.2xlarge": {
                "Arch": "NATHVM64"
            },
            "c3.4xlarge": {
                "Arch": "NATHVM64"
            },
            "c3.8xlarge": {
                "Arch": "NATHVM64"
            },
            "c4.large": {
                "Arch": "NATHVM64"
            },
            "c4.xlarge": {
                "Arch": "NATHVM64"
            },
            "c4.2xlarge": {
                "Arch": "NATHVM64"
            },
            "c4.4xlarge": {
                "Arch": "NATHVM64"
            },
            "c4.8xlarge": {
                "Arch": "NATHVM64"
            },
            "g2.2xlarge": {
                "Arch": "NATHVMG2"
            },
            "g2.8xlarge": {
                "Arch": "NATHVMG2"
            },
            "r3.large": {
                "Arch": "NATHVM64"
            },
            "r3.xlarge": {
                "Arch": "NATHVM64"
            },
            "r3.2xlarge": {
                "Arch": "NATHVM64"
            },
            "r3.4xlarge": {
                "Arch": "NATHVM64"
            },
            "r3.8xlarge": {
                "Arch": "NATHVM64"
            },
            "i2.xlarge": {
                "Arch": "NATHVM64"
            },
            "i2.2xlarge": {
                "Arch": "NATHVM64"
            },
            "i2.4xlarge": {
                "Arch": "NATHVM64"
            },
            "i2.8xlarge": {
                "Arch": "NATHVM64"
            },
            "d2.xlarge": {
                "Arch": "NATHVM64"
            },
            "d2.2xlarge": {
                "Arch": "NATHVM64"
            },
            "d2.4xlarge": {
                "Arch": "NATHVM64"
            },
            "d2.8xlarge": {
                "Arch": "NATHVM64"
            },
            "hi1.4xlarge": {
                "Arch": "NATHVM64"
            },
            "hs1.8xlarge": {
                "Arch": "NATHVM64"
            },
            "cr1.8xlarge": {
                "Arch": "NATHVM64"
            },
            "cc2.8xlarge": {
                "Arch": "NATHVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "PV64": "ami-2a69aa47",
                "HVM64": "ami-7f6aa912",
                "HVMG2": "ami-3353c649"
            },
            "us-west-2": {
                "PV64": "ami-7f77b31f",
                "HVM64": "ami-f469ad94",
                "HVMG2": "ami-58ce1220"
            },
            "us-west-1": {
                "PV64": "ami-a2490dc2",
                "HVM64": "ami-594b0f39",
                "HVMG2": "ami-62ad9502"
            },
            "eu-west-1": {
                "PV64": "ami-4cdd453f",
                "HVM64": "ami-c5da42b6",
                "HVMG2": "ami-41bc0a38"
            },
            "eu-west-2": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-896369ed",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-west-3": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-central-1": {
                "PV64": "ami-6527cf0a",
                "HVM64": "ami-e526ce8a",
                "HVMG2": "ami-b50d8fda"
            },
            "ap-northeast-1": {
                "PV64": "ami-3e42b65f",
                "HVM64": "ami-7f4db91e",
                "HVMG2": "ami-14e45872"
            },
            "ap-northeast-2": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-39448f57",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-northeast-3": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-1": {
                "PV64": "ami-df9e4cbc",
                "HVM64": "ami-a69b49c5",
                "HVMG2": "ami-2a80d649"
            },
            "ap-southeast-2": {
                "PV64": "ami-63351d00",
                "HVM64": "ami-10361e73",
                "HVMG2": "ami-02c42e60"
            },
            "ap-south-1": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-fdbed492",
                "HVMG2": "ami-f6165899"
            },
            "us-east-2": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-d90c57bc",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ca-central-1": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-33f34157",
                "HVMG2": "NOT_SUPPORTED"
            },
            "sa-east-1": {
                "PV64": "ami-1ad34676",
                "HVM64": "ami-aed144c2",
                "HVMG2": "NOT_SUPPORTED"
            },
            "cn-north-1": {
                "PV64": "ami-77559f1a",
                "HVM64": "ami-14519b79",
                "HVMG2": "NOT_SUPPORTED"
            },
            "cn-northwest-1": {
                "PV64": "ami-80707be2",
                "HVM64": "ami-ec868c8e",
                "HVMG2": "NOT_SUPPORTED"
            }
        }
    },
    "Resources": {
        "CFNRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": {
                                    "Fn::FindInMap": [
                                        "Region2Principal",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        "EC2Principal"
                                    ]
                                }
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9939e16b-9252-45c7-a196-06ee4c7fb5e6"
                }
            }
        },
        "CFNRolePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CloudFormerPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:Describe*",
                                "cloudformation:Describe*",
                                "cloudformation:List*",
                                "cloudfront:List*",
                                "cloudFront:Get*",
                                "cloudtrail:Describe*",
                                "cloudtrail:Get*",
                                "cloudwatch:Describe*",
                                "dynamodb:List*",
                                "dynamodb:Describe*",
                                "elasticbeanstalk:Describe*",
                                "ec2:Describe*",
                                "elasticloadbalancing:Describe*",
                                "elasticache:Describe*",
                                "rds:Describe*",
                                "rds:List*",
                                "route53:List*",
                                "route53:Get*",
                                "s3:List*",
                                "s3:Get*",
                                "s3:PutObject",
                                "sdb:Get*",
                                "sdb:List*",
                                "sns:Get*",
                                "sns:List*",
                                "sqs:Get*",
                                "sqs:List*",
                                "opsworks:Describe*",
                                "redshift:Describe*",
                                "kinesis:Describe*",
                                "kinesis:List*"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "CFNRole"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "67523bc8-c23f-4bcc-9115-7d0cf7d413bd"
                }
            }
        },
        "CFNInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "CFNRole"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c923448d-2256-44e7-ab97-23e2903d78ca"
                }
            }
        },
        "WebServer": {
            "Condition": "DefaultVPC",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "full_install": [
                            "base",
                            "cloudformer"
                        ]
                    },
                    "base": {
                        "packages": {
                            "yum": {
                                "gcc": [],
                                "gcc-c++": [],
                                "make": [],
                                "libxml2-devel": [],
                                "libxslt-devel": [],
                                "sqlite-devel": [],
                                "patch": [],
                                "readline": [],
                                "readline-devel": [],
                                "zlib": [],
                                "zlib-devel": [],
                                "libyaml-devel": [],
                                "libffi-devel": [],
                                "openssl-devel": [],
                                "bzip2": [],
                                "autoconf": [],
                                "automake": [],
                                "libtool": [],
                                "bison": [],
                                "ruby-devel": []
                            }
                        }
                    },
                    "cloudformer": {
                        "sources": {
                            "/home/ec2-user/cloudformer": {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Fn::FindInMap": [
                                                "Region2Examples",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "Examples"
                                            ]
                                        },
                                        "AWSCloudFormer041.zip"
                                    ]
                                ]
                            }
                        },
                        "files": {
                            "/home/ec2-user/setup_cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "# Setup the CloudFormer service\n",
                                            "mkdir -p vendor/bundle\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rake-10.4.2.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundler-1.7.11.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundle-0.0.1.gem\n",
                                            "/usr/local/bin/bundle install --local --path /home/ec2-user/cloudformer/vendor/bundle\n",
                                            "/usr/local/bin/rake RAILS_ENV=production db:migrate\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rack-1.6.0.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/eventmachine-1.0.4.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/daemons-1.1.9.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/thin-1.6.3.gem\n",
                                            "# Create certificate and private key for SSL\n",
                                            "mkdir -p /home/ec2-user/cloudformer/.ssl\n",
                                            "cd /home/ec2-user/cloudformer/.ssl\n",
                                            "openssl genrsa -des3 -passout pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -out server.pass.key 1024\n",
                                            "openssl rsa -passin pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -in server.pass.key -out server.key\n",
                                            "openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=CloudFormer\"\n",
                                            "openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n",
                                            "rm server.pass.key server.csr\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/home/ec2-user/cloudformer/config/initializers/user.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "USER_NAME = \"",
                                            {
                                                "Ref": "Username"
                                            },
                                            "\"\n",
                                            "PASSWORD = \"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\"\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/usr/bin/cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "/usr/local/bin/thin start -p 443 -e production -d --ssl --ssl-key-file /home/ec2-user/cloudformer/.ssl/server.key --ssl-cert-file /home/ec2-user/cloudformer/.ssl/server.crt\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "01_install_cloudformer": {
                                "command": "/home/ec2-user/setup_cloudformer &> /var/log/setup_cloudformer.log",
                                "cwd": "/home/ec2-user/cloudformer"
                            },
                            "02_setup_boot": {
                                "command": "echo '/usr/bin/cloudformer' >> /etc/rc.local",
                                "cwd": "/"
                            }
                        }
                    }
                },
                "AWS::CloudFormation::Designer": {
                    "id": "a99b9bb1-48f2-47b4-87c2-048591125122"
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                "t2.small",
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": "t2.small",
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "CFNInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServer ",
                                "         --configsets full_install ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServer ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M"
                }
            }
        },
        "WebServerCustomVPC": {
            "Condition": "CreateNewVPC",
            "DependsOn": "RouteVPCAny",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "base": {
                        "packages": {
                            "yum": {
                                "autoconf": [],
                                "automake": [],
                                "bison": [],
                                "bzip2": [],
                                "gcc": [],
                                "gcc-c++": [],
                                "libffi-devel": [],
                                "libtool": [],
                                "libxml2-devel": [],
                                "libxslt-devel": [],
                                "libyaml-devel": [],
                                "make": [],
                                "openssl-devel": [],
                                "patch": [],
                                "readline": [],
                                "readline-devel": [],
                                "ruby-devel": [],
                                "sqlite-devel": [],
                                "zlib": [],
                                "zlib-devel": []
                            }
                        }
                    },
                    "cloudformer": {
                        "commands": {
                            "01_install_cloudformer": {
                                "command": "/home/ec2-user/setup_cloudformer &> /var/log/setup_cloudformer.log",
                                "cwd": "/home/ec2-user/cloudformer"
                            },
                            "02_setup_boot": {
                                "command": "echo '/usr/bin/cloudformer' >> /etc/rc.local",
                                "cwd": "/"
                            }
                        },
                        "files": {
                            "/home/ec2-user/cloudformer/config/initializers/user.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "USER_NAME = \"",
                                            {
                                                "Ref": "Username"
                                            },
                                            "\"\n",
                                            "PASSWORD = \"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\"\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000400",
                                "owner": "root"
                            },
                            "/home/ec2-user/setup_cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "# Setup the CloudFormer service\n",
                                            "mkdir -p vendor/bundle\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rake-10.4.2.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundler-1.7.11.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundle-0.0.1.gem\n",
                                            "/usr/local/bin/bundle install --local --path /home/ec2-user/cloudformer/vendor/bundle\n",
                                            "/usr/local/bin/rake RAILS_ENV=production db:migrate\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rack-1.6.0.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/eventmachine-1.0.4.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/daemons-1.1.9.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/thin-1.6.3.gem\n",
                                            "# Create certificate and private key for SSL\n",
                                            "mkdir -p /home/ec2-user/cloudformer/.ssl\n",
                                            "cd /home/ec2-user/cloudformer/.ssl\n",
                                            "openssl genrsa -des3 -passout pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -out server.pass.key 1024\n",
                                            "openssl rsa -passin pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -in server.pass.key -out server.key\n",
                                            "openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=CloudFormer\"\n",
                                            "openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n",
                                            "rm server.pass.key server.csr\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/usr/bin/cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "/usr/local/bin/thin start -p 443 -e production -d --ssl --ssl-key-file /home/ec2-user/cloudformer/.ssl/server.key --ssl-cert-file /home/ec2-user/cloudformer/.ssl/server.crt\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            }
                        },
                        "sources": {
                            "/home/ec2-user/cloudformer": {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Fn::FindInMap": [
                                                "Region2Examples",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "Examples"
                                            ]
                                        },
                                        "AWSCloudFormer041.zip"
                                    ]
                                ]
                            }
                        }
                    },
                    "configSets": {
                        "full_install": [
                            "base",
                            "cloudformer"
                        ]
                    }
                },
                "AWS::CloudFormation::Designer": {
                    "id": "2c70d5e8-db50-4d0d-9851-accef004232a"
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public-EC2-1"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "CFNInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                "t2.small",
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": "t2.small",
                "SubnetId": {
                    "Ref": "VPCSubnet"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServerCustomVPC ",
                                "         --configsets full_install ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServerCustomVPC ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "WebServerCustomVPC1": {
            "Condition": "CreateNewVPC",
            "DependsOn": "RouteVPCAny",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "base": {
                        "packages": {
                            "yum": {
                                "autoconf": [],
                                "automake": [],
                                "bison": [],
                                "bzip2": [],
                                "gcc": [],
                                "gcc-c++": [],
                                "libffi-devel": [],
                                "libtool": [],
                                "libxml2-devel": [],
                                "libxslt-devel": [],
                                "libyaml-devel": [],
                                "make": [],
                                "openssl-devel": [],
                                "patch": [],
                                "readline": [],
                                "readline-devel": [],
                                "ruby-devel": [],
                                "sqlite-devel": [],
                                "zlib": [],
                                "zlib-devel": []
                            }
                        }
                    },
                    "cloudformer": {
                        "commands": {
                            "01_install_cloudformer": {
                                "command": "/home/ec2-user/setup_cloudformer &> /var/log/setup_cloudformer.log",
                                "cwd": "/home/ec2-user/cloudformer"
                            },
                            "02_setup_boot": {
                                "command": "echo '/usr/bin/cloudformer' >> /etc/rc.local",
                                "cwd": "/"
                            }
                        },
                        "files": {
                            "/home/ec2-user/cloudformer/config/initializers/user.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "USER_NAME = \"",
                                            {
                                                "Ref": "Username"
                                            },
                                            "\"\n",
                                            "PASSWORD = \"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\"\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000400",
                                "owner": "root"
                            },
                            "/home/ec2-user/setup_cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "# Setup the CloudFormer service\n",
                                            "mkdir -p vendor/bundle\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rake-10.4.2.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundler-1.7.11.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundle-0.0.1.gem\n",
                                            "/usr/local/bin/bundle install --local --path /home/ec2-user/cloudformer/vendor/bundle\n",
                                            "/usr/local/bin/rake RAILS_ENV=production db:migrate\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rack-1.6.0.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/eventmachine-1.0.4.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/daemons-1.1.9.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/thin-1.6.3.gem\n",
                                            "# Create certificate and private key for SSL\n",
                                            "mkdir -p /home/ec2-user/cloudformer/.ssl\n",
                                            "cd /home/ec2-user/cloudformer/.ssl\n",
                                            "openssl genrsa -des3 -passout pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -out server.pass.key 1024\n",
                                            "openssl rsa -passin pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -in server.pass.key -out server.key\n",
                                            "openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=CloudFormer\"\n",
                                            "openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n",
                                            "rm server.pass.key server.csr\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/usr/bin/cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "/usr/local/bin/thin start -p 443 -e production -d --ssl --ssl-key-file /home/ec2-user/cloudformer/.ssl/server.key --ssl-cert-file /home/ec2-user/cloudformer/.ssl/server.crt\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            }
                        },
                        "sources": {
                            "/home/ec2-user/cloudformer": {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Fn::FindInMap": [
                                                "Region2Examples",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "Examples"
                                            ]
                                        },
                                        "AWSCloudFormer041.zip"
                                    ]
                                ]
                            }
                        }
                    },
                    "configSets": {
                        "full_install": [
                            "base",
                            "cloudformer"
                        ]
                    }
                },
                "AWS::CloudFormation::Designer": {
                    "id": "2c70d5e8-db50-4d0d-9851-accef004232a"
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public-EC2-2"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "CFNInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                "t2.small",
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": "t2.small",
                "SubnetId": {
                    "Ref": "VPCSubnet"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServerCustomVPC ",
                                "         --configsets full_install ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServerCustomVPC ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "WebServerCustomVPC3": {
            "Condition": "CreateNewVPC",
            "DependsOn": "RouteVPCAny",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "base": {
                        "packages": {
                            "yum": {
                                "autoconf": [],
                                "automake": [],
                                "bison": [],
                                "bzip2": [],
                                "gcc": [],
                                "gcc-c++": [],
                                "libffi-devel": [],
                                "libtool": [],
                                "libxml2-devel": [],
                                "libxslt-devel": [],
                                "libyaml-devel": [],
                                "make": [],
                                "openssl-devel": [],
                                "patch": [],
                                "readline": [],
                                "readline-devel": [],
                                "ruby-devel": [],
                                "sqlite-devel": [],
                                "zlib": [],
                                "zlib-devel": []
                            }
                        }
                    },
                    "cloudformer": {
                        "commands": {
                            "01_install_cloudformer": {
                                "command": "/home/ec2-user/setup_cloudformer &> /var/log/setup_cloudformer.log",
                                "cwd": "/home/ec2-user/cloudformer"
                            },
                            "02_setup_boot": {
                                "command": "echo '/usr/bin/cloudformer' >> /etc/rc.local",
                                "cwd": "/"
                            }
                        },
                        "files": {
                            "/home/ec2-user/cloudformer/config/initializers/user.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "USER_NAME = \"",
                                            {
                                                "Ref": "Username"
                                            },
                                            "\"\n",
                                            "PASSWORD = \"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\"\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000400",
                                "owner": "root"
                            },
                            "/home/ec2-user/setup_cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "# Setup the CloudFormer service\n",
                                            "mkdir -p vendor/bundle\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rake-10.4.2.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundler-1.7.11.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundle-0.0.1.gem\n",
                                            "/usr/local/bin/bundle install --local --path /home/ec2-user/cloudformer/vendor/bundle\n",
                                            "/usr/local/bin/rake RAILS_ENV=production db:migrate\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rack-1.6.0.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/eventmachine-1.0.4.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/daemons-1.1.9.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/thin-1.6.3.gem\n",
                                            "# Create certificate and private key for SSL\n",
                                            "mkdir -p /home/ec2-user/cloudformer/.ssl\n",
                                            "cd /home/ec2-user/cloudformer/.ssl\n",
                                            "openssl genrsa -des3 -passout pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -out server.pass.key 1024\n",
                                            "openssl rsa -passin pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -in server.pass.key -out server.key\n",
                                            "openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=CloudFormer\"\n",
                                            "openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n",
                                            "rm server.pass.key server.csr\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/usr/bin/cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "/usr/local/bin/thin start -p 443 -e production -d --ssl --ssl-key-file /home/ec2-user/cloudformer/.ssl/server.key --ssl-cert-file /home/ec2-user/cloudformer/.ssl/server.crt\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            }
                        },
                        "sources": {
                            "/home/ec2-user/cloudformer": {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Fn::FindInMap": [
                                                "Region2Examples",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "Examples"
                                            ]
                                        },
                                        "AWSCloudFormer041.zip"
                                    ]
                                ]
                            }
                        }
                    },
                    "configSets": {
                        "full_install": [
                            "base",
                            "cloudformer"
                        ]
                    }
                },
                "AWS::CloudFormation::Designer": {
                    "id": "2c70d5e8-db50-4d0d-9851-accef004232a"
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private-EC2-1"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "CFNInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                "t2.small",
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": "t2.small",
                "SubnetId": {
                    "Ref": "VPCSubnet1"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "privateWebServerSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServerCustomVPC ",
                                "         --configsets full_install ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServerCustomVPC ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "WebServerCustomVPC4": {
            "Condition": "CreateNewVPC",
            "DependsOn": "RouteVPCAny",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "base": {
                        "packages": {
                            "yum": {
                                "autoconf": [],
                                "automake": [],
                                "bison": [],
                                "bzip2": [],
                                "gcc": [],
                                "gcc-c++": [],
                                "libffi-devel": [],
                                "libtool": [],
                                "libxml2-devel": [],
                                "libxslt-devel": [],
                                "libyaml-devel": [],
                                "make": [],
                                "openssl-devel": [],
                                "patch": [],
                                "readline": [],
                                "readline-devel": [],
                                "ruby-devel": [],
                                "sqlite-devel": [],
                                "zlib": [],
                                "zlib-devel": []
                            }
                        }
                    },
                    "cloudformer": {
                        "commands": {
                            "01_install_cloudformer": {
                                "command": "/home/ec2-user/setup_cloudformer &> /var/log/setup_cloudformer.log",
                                "cwd": "/home/ec2-user/cloudformer"
                            },
                            "02_setup_boot": {
                                "command": "echo '/usr/bin/cloudformer' >> /etc/rc.local",
                                "cwd": "/"
                            }
                        },
                        "files": {
                            "/home/ec2-user/cloudformer/config/initializers/user.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "USER_NAME = \"",
                                            {
                                                "Ref": "Username"
                                            },
                                            "\"\n",
                                            "PASSWORD = \"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\"\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000400",
                                "owner": "root"
                            },
                            "/home/ec2-user/setup_cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "# Setup the CloudFormer service\n",
                                            "mkdir -p vendor/bundle\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rake-10.4.2.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundler-1.7.11.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundle-0.0.1.gem\n",
                                            "/usr/local/bin/bundle install --local --path /home/ec2-user/cloudformer/vendor/bundle\n",
                                            "/usr/local/bin/rake RAILS_ENV=production db:migrate\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/rack-1.6.0.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/eventmachine-1.0.4.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/daemons-1.1.9.gem\n",
                                            "gem install --local /home/ec2-user/cloudformer/vendor/cache/thin-1.6.3.gem\n",
                                            "# Create certificate and private key for SSL\n",
                                            "mkdir -p /home/ec2-user/cloudformer/.ssl\n",
                                            "cd /home/ec2-user/cloudformer/.ssl\n",
                                            "openssl genrsa -des3 -passout pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -out server.pass.key 1024\n",
                                            "openssl rsa -passin pass:\"",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\" -in server.pass.key -out server.key\n",
                                            "openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=CloudFormer\"\n",
                                            "openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n",
                                            "rm server.pass.key server.csr\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/usr/bin/cloudformer": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/usr/bin/env bash\n",
                                            "cd /home/ec2-user/cloudformer\n",
                                            "/usr/local/bin/thin start -p 443 -e production -d --ssl --ssl-key-file /home/ec2-user/cloudformer/.ssl/server.key --ssl-cert-file /home/ec2-user/cloudformer/.ssl/server.crt\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            }
                        },
                        "sources": {
                            "/home/ec2-user/cloudformer": {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Fn::FindInMap": [
                                                "Region2Examples",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "Examples"
                                            ]
                                        },
                                        "AWSCloudFormer041.zip"
                                    ]
                                ]
                            }
                        }
                    },
                    "configSets": {
                        "full_install": [
                            "base",
                            "cloudformer"
                        ]
                    }
                },
                "AWS::CloudFormation::Designer": {
                    "id": "2c70d5e8-db50-4d0d-9851-accef004232a"
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private-EC2-2"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "CFNInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                "t2.small",
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": "t2.small",
                "SubnetId": {
                    "Ref": "VPCSubnet1"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "privateWebServerSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServerCustomVPC ",
                                "         --configsets full_install ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource WebServerCustomVPC ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public-SG"
                    }
                ],
                "GroupDescription": "Enable HTTP and HTTPS access via port 443",
                "VpcId": {
                    "Fn::If": [
                        "CreateNewVPC",
                        {
                            "Ref": "VPC"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9e50c173-6e62-4d8b-92e8-c0ffc188e8f1"
                }
            }
        },
        "privateWebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private-SG"
                    }
                ],
                "GroupDescription": "Private Security Group",
                "VpcId": {
                    "Fn::If": [
                        "CreateNewVPC",
                        {
                            "Ref": "VPC"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9e50c173-6e62-4d8b-92e8-c0ffc188e8f1"
                }
            }
        },
        "VPC": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "CustomVPC"
                    }
                ],
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "de20c080-5fa1-460d-a642-776cc276ef83"
                }
            }
        },
        "VPCSubnet": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PublicSubnet"
                    }
                ],
                "MapPublicIpOnLaunch": "true",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.1.0/24"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "08be7b79-24a9-458f-882d-3041e7c3b26f"
                }
            }
        },
        "VPCSubnet1": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrivateSubnet"
                    }
                ],
                "MapPublicIpOnLaunch": "false",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.2.0/24"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "08be7b79-24a9-458f-882d-3041e7c3b26f"
                }
            }
        },
        "VPCInternetGateway": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {},
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9bc7ff3b-b1f4-4a6a-8709-5063823e09fd"
                }
            }
        },
        "VPCAttachGateway": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "VPCInternetGateway"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "04141b32-2295-4541-bfd4-99a7e5973fa9"
                }
            }
        },
        "VPCRouteTable": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public-RT"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cb46c35a-370b-4fc9-be95-41e1cefe128c"
                }
            }
        },
        "VPCSubnetRouteTableAssociation": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "VPCSubnet"
                },
                "RouteTableId": {
                    "Ref": "VPCRouteTable"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1e473ac8-c8db-40f7-9219-7b3187a71658"
                }
            }
        },
        "VPCRouteTable1": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private-RT"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cb46c35a-370b-4fc9-be95-41e1cefe128c"
                }
            }
        },
        "VPCSubnetRouteTableAssociation1": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "VPCSubnet1"
                },
                "RouteTableId": {
                    "Ref": "VPCRouteTable1"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1e473ac8-c8db-40f7-9219-7b3187a71658"
                }
            }
        },
        "RouteVPCAny": {
            "Condition": "CreateNewVPC",
            "Type": "AWS::EC2::Route",
            "DependsOn": "VPCAttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VPCRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "VPCInternetGateway"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1883a7c9-74e5-4314-af8f-5f0246ced251"
                }
            }
        },
        "myDB" : {
            "Type" : "AWS::RDS::DBInstance",
            "Condition": "CreateNewVPC",
            "Properties" : {
               "AllocatedStorage" : "5",
               "DBInstanceClass" : "db.t2.small",
               "Engine" : "MySQL",
               "EngineVersion" : "5.5",
               "MasterUsername" : "MyName",
               "MasterUserPassword" : "MyPassword",
               "BackupRetentionPeriod"  : "7",
               "StorageEncrypted" : "true"
            }
        },
        "MyLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Condition": "CreateNewVPC",
            "Properties" : {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "CustomELB-Public"
                    }
                ],
                "LoadBalancerName" : "MyLoadbalancer-1",
                "SecurityGroups" :[ { "Ref" : "WebServerSecurityGroup" } ],
                "Subnets" : { "Ref" : "VPCSubnet" },
                 "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZones" : { "Fn::GetAZs": {     
                    "Ref": "AWS::Region"
                    }
                },
                "Instances" : [
                    { "Ref" : "WebServerCustomVPC" },
                    { "Ref" : "WebServerCustomVPC1" }
                    ],
                "Listeners" : [ {
                    "LoadBalancerPort" : "80",
                    "InstancePort" : "80",
                    "Protocol" : "HTTP"
                    } ],
                    "HealthCheck" : {
                        "Target" : "HTTP:80/",
                        "HealthyThreshold" : "3",
                        "UnhealthyThreshold" : "5",
                        "Interval" : "30",
                        "Timeout" : "5"
                        }
            }
        },
        "MyLoadBalancer1" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Condition": "CreateNewVPC",
            "Properties" : {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "CustomELB-Private"
                    }
                ],
                "LoadBalancerName" : "MyLoadbalancer-2",
                "SecurityGroups" :[ { "Ref" : "privateWebServerSecurityGroup" } ],
                "Subnets" : { "Ref" : "VPCSubnet1" },
                 "VpcId": {
                    "Ref": "VPC"
                },
                 "AvailabilityZones" : { "Fn::GetAZs": {     
                    "Ref": "AWS::Region"
                    }
                },
                "Instances" : [
                    { "Ref" : "WebServerCustomVPC3" },
                    { "Ref" : "WebServerCustomVPC4" }
                    ],
                "Listeners" : [ {
                    "LoadBalancerPort" : "80",
                    "InstancePort" : "80",
                    "Protocol" : "HTTP"
                    } ],
                    "HealthCheck" : {
                        "Target" : "HTTP:80/",
                        "HealthyThreshold" : "3",
                        "UnhealthyThreshold" : "5",
                        "Interval" : "30",
                        "Timeout" : "5"
                        }
            }
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "PublicReadWrite",
                "BucketName": "defgthfdfre1234fdfr",
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "Id": "GlacierRule",
                            "Prefix": "glacier",
                            "Status": "Enabled",
                            "ExpirationInDays": "365",
                            "Transitions": [
                                {
                                  "TransitionInDays": "90",
                                  "StorageClass": "Glacier"
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "myDNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : {"Ref" : "HostedZone"},
                "Comment" : "DNS name for my instance.", 
                "Name" : {
                    "Fn::Join" : [ "", [
                        {"Ref" : "WebServerCustomVPC"}, ".",
                        {"Ref" : "AWS::Region"}, "."
                        ] ]
                        },
                        "Type" : "A",
                        "TTL" : "900"
                        }
        } ,
        "S3ReadPolicy" : {
  "Type": "AWS::IAM::Policy",
  "Properties": {
    "PolicyName": "read_only_policy",
    "PolicyDocument": {
      "Version" : "2012-10-17",
      "Statement": [
        {
          "Effect" : "Allow",
          "Action":[
            "s3:List*",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetLifecycleConfiguration"
          ],
          "Resource": "*"
        }
      ]
    },
    "Users" : [
      { "Ref" : "IAMUser" }
    ]
  }
},
         "MySubscription" : {
             "Type" : "AWS::SNS::Subscription",
             "Properties" : {
                 "Endpoint" : "test@email.com",
                 "Protocol" : "email",
                 "TopicArn" : "MySNSTopic"
                 }
                },

         "SNS":{
              "Type" : "AWS::SNS::Topic",
              "Properties" : {
                "DisplayName" : "CPU Alert",
                "Subscription" : {"Ref":"MySubscription"},
                "TopicName" : "CPU"
              }
            },
        
        "ApplicationCPUAlarm" : {
          "Type" : "AWS::CloudWatch::Alarm",
          "Properties" : {
            "AlarmDescription" : "CPU alarm for my instance",
            "AlarmActions" : [ { "Ref" : "SNS" } ],
            "MetricName" : "CPUUtilization",
            "Namespace" : "AWS/EC2",
            "Statistic" : "Average",
            "Period" : "60",
            "EvaluationPeriods" : "3",
            "Threshold" : "90",
            "ComparisonOperator" : "GreaterThanThreshold",
            "Dimensions" : [ {
              "Name" : "InstanceId",
              "Value" : { "Ref" : "WebServerCustomVPC" }
            } ]
          }
        }
    },
    "Outputs": {
        "CustomVPCWebsiteURL": {
            "Description": "URL for CloudFormer",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::If": [
                                "CreateNewVPC",
                                {
                                    "Fn::GetAtt": [
                                        "WebServerCustomVPC",
                                        "PublicDnsName"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "WebServer",
                                        "PublicDnsName"
                                    ]
                                }
                            ]
                        }
                    ]
                ]
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "9bc7ff3b-b1f4-4a6a-8709-5063823e09fd": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 750
                },
                "z": 1,
                "embeds": []
            },
            "de20c080-5fa1-460d-a642-776cc276ef83": {
                "size": {
                    "width": 690,
                    "height": 600
                },
                "position": {
                    "x": 60,
                    "y": 90
                },
                "z": 1,
                "embeds": [
                    "cb46c35a-370b-4fc9-be95-41e1cefe128c",
                    "08be7b79-24a9-458f-882d-3041e7c3b26f"
                ]
            },
            "cb46c35a-370b-4fc9-be95-41e1cefe128c": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 390,
                    "y": 150
                },
                "z": 2,
                "parent": "de20c080-5fa1-460d-a642-776cc276ef83",
                "embeds": [
                    "1883a7c9-74e5-4314-af8f-5f0246ced251"
                ],
                "iscontainedinside": [
                    "de20c080-5fa1-460d-a642-776cc276ef83"
                ]
            },
            "04141b32-2295-4541-bfd4-99a7e5973fa9": {
                "source": {
                    "id": "de20c080-5fa1-460d-a642-776cc276ef83"
                },
                "target": {
                    "id": "9bc7ff3b-b1f4-4a6a-8709-5063823e09fd"
                }
            },
            "1883a7c9-74e5-4314-af8f-5f0246ced251": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 210
                },
                "z": 3,
                "parent": "cb46c35a-370b-4fc9-be95-41e1cefe128c",
                "embeds": [],
                "isassociatedwith": [
                    "9bc7ff3b-b1f4-4a6a-8709-5063823e09fd"
                ],
                "iscontainedinside": [
                    "cb46c35a-370b-4fc9-be95-41e1cefe128c"
                ],
                "dependson": [
                    "04141b32-2295-4541-bfd4-99a7e5973fa9"
                ]
            },
            "08be7b79-24a9-458f-882d-3041e7c3b26f": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 90,
                    "y": 150
                },
                "z": 2,
                "parent": "de20c080-5fa1-460d-a642-776cc276ef83",
                "embeds": [
                    "2c70d5e8-db50-4d0d-9851-accef004232a"
                ],
                "iscontainedinside": [
                    "de20c080-5fa1-460d-a642-776cc276ef83"
                ]
            },
            "1e473ac8-c8db-40f7-9219-7b3187a71658": {
                "source": {
                    "id": "cb46c35a-370b-4fc9-be95-41e1cefe128c"
                },
                "target": {
                    "id": "08be7b79-24a9-458f-882d-3041e7c3b26f"
                }
            },
            "9e50c173-6e62-4d8b-92e8-c0ffc188e8f1": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 750
                },
                "z": 1,
                "embeds": []
            },
            "9939e16b-9252-45c7-a196-06ee4c7fb5e6": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 750
                },
                "z": 1,
                "embeds": []
            },
            "c923448d-2256-44e7-ab97-23e2903d78ca": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 750
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "9939e16b-9252-45c7-a196-06ee4c7fb5e6"
                ]
            },
            "2c70d5e8-db50-4d0d-9851-accef004232a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 120,
                    "y": 210
                },
                "z": 3,
                "parent": "08be7b79-24a9-458f-882d-3041e7c3b26f",
                "embeds": [],
                "isassociatedwith": [
                    "9e50c173-6e62-4d8b-92e8-c0ffc188e8f1"
                ],
                "iscontainedinside": [
                    "08be7b79-24a9-458f-882d-3041e7c3b26f"
                ],
                "dependson": [
                    "1883a7c9-74e5-4314-af8f-5f0246ced251"
                ]
            },
            "a99b9bb1-48f2-47b4-87c2-048591125122": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 750
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "9e50c173-6e62-4d8b-92e8-c0ffc188e8f1"
                ]
            },
            "67523bc8-c23f-4bcc-9115-7d0cf7d413bd": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 660,
                    "y": 750
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "9939e16b-9252-45c7-a196-06ee4c7fb5e6"
                ]
            }
        }
    }
}
